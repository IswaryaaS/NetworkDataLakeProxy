{
	"info": {
		"_postman_id": "1b60ca2c-edc0-4e66-a713-4c6b6686b300",
		"name": "FieldsFilterTest",
		"description": "FieldsFilterTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== Testing ============================================================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "ControlConstructWithFieldsFilter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== ControlConstructWithFieldsFilter ====================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var collectionInfo = {};\r",
									"var serverInfo = {};\r",
									"var dummyServerInfo = {};\r",
									"try {\r",
									"    let collectionInputList;\r",
									"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
									"    collectionInfo = ExtractCollectionInput(collectionInputList, \"FieldsFilterTest\");\r",
									"\r",
									"    let serverToBeApplied;\r",
									"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let filters;\r",
									"    filters = \"?fields=\"\r",
									"        + \"equipment-augment-1-0:control-construct-pac;\"\r",
									"        + \"top-level-equipment;\"\r",
									"        + \"equipment(\"\r",
									"            + \"uuid;\"\r",
									"            + \"operational-state;\"\r",
									"            + \"connector(\"\r",
									"                + \"local-id;\"\r",
									"                + \"equipment-augment-1-0:connector-pac(\"\r",
									"                    + \"connector-kind;\"\r",
									"                    + \"outside-label;\"\r",
									"                    + \"sequence-id\"\r",
									"                + \")\"\r",
									"            + \");\"\r",
									"            + \"contained-holder(\"\r",
									"                + \"occupying-fru;\"\r",
									"                + \"local-id;\"\r",
									"                + \"equipment-augment-1-0:holder-pac(\"\r",
									"                    + \"vendor-label;\"\r",
									"                    + \"outside-label;\"\r",
									"                    + \"sequence-id\"\r",
									"                + \")\"\r",
									"            + \");\"\r",
									"            + \"expected-equipment(\"\r",
									"                + \"structure(\"\r",
									"                    + \"category\"\r",
									"                + \");\"\r",
									"                + \"manufactured-thing(\"\r",
									"                    + \"manufacturer-properties(\"\r",
									"                        +\"manufacturer-name\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-type(\"\r",
									"                        + \"part-type-identifier;\"\r",
									"                        + \"version\"\r",
									"                    + \")\"\r",
									"                + \");\"\r",
									"                + \"local-id;\"\r",
									"                + \"operational-state\"\r",
									"            + \");\"\r",
									"            + \"actual-equipment(\"\r",
									"                + \"structure(\"\r",
									"                    + \"category\"\r",
									"                + \");\"\r",
									"                + \"physical-properties(\"\r",
									"                    + \"temperature\"\r",
									"                + \");\"\r",
									"                + \"manufactured-thing(\"\r",
									"                    + \"manufacturer-properties(\"\r",
									"                        +\"manufacturer-name\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-type(\"\r",
									"                        + \"part-type-identifier;\"\r",
									"                        + \"version\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-instance(\"\r",
									"                        + \"manufacture-date;\"\r",
									"                        + \"serial-number\"\r",
									"                    + \")\"\r",
									"                + \");\"\r",
									"                + \"operational-state\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"firmware-1-0:firmware-collection;\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"air-interface-2-0:air-interface-pac(\"\r",
									"                    + \"air-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"ethernet-container-2-0:ethernet-container-pac(\"\r",
									"                    + \"ethernet-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac(\"\r",
									"                    + \"hybrid-mw-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"ip-interface-1-0:ip-interface-pac(\"\r",
									"                    + \"ip-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"mac-interface-1-0:mac-interface-pac(\"\r",
									"                    + \"mac-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac(\"\r",
									"                    + \"pure-ethernet-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac(\"\r",
									"                    + \"tdm-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"vlan-interface-1-0:vlan-interface-pac(\"\r",
									"                    + \"vlan-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"wire-interface-2-0:wire-interface-pac(\"\r",
									"                    + \"wire-interface-configuration\"\r",
									"                + \")\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"profile-collection;\"\r",
									"        + \"forwarding-domain\";\r",
									"\r",
									"/* Successfully tested against 513250011 at Controller:\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name\"\r",
									"            + \")\"\r",
									"        + \")\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"top-level-equipment;\"\r",
									"        + \"equipment;\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name\"\r",
									"            + \")\"\r",
									"        + \")\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac\"\r",
									"            + \")\"\r",
									"        + \")\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac;\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"\r",
									"            + \")\"\r",
									"        + \")\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac(\"\r",
									"                    + \"tdm-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac(\"\r",
									"                    + \"hybrid-mw-structure-configuration\"\r",
									"                + \")\"\r",
									"            + \")\"\r",
									"        + \")\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"top-level-equipment;\"\r",
									"        + \"equipment;\"\r",
									"        + \"firmware-1-0:firmware-collection;\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac(\"\r",
									"                    + \"tdm-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac(\"\r",
									"                    + \"hybrid-mw-structure-configuration\"\r",
									"                + \")\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"profile-collection;\"\r",
									"        + \"forwarding-domain\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"top-level-equipment;\"\r",
									"        + \"equipment;\"\r",
									"        + \"firmware-1-0:firmware-collection;\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"air-interface-2-0:air-interface-pac(\"\r",
									"                    + \"air-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"ethernet-container-2-0:ethernet-container-pac(\"\r",
									"                    + \"ethernet-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac(\"\r",
									"                    + \"hybrid-mw-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"ip-interface-1-0:ip-interface-pac(\"\r",
									"                    + \"ip-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"mac-interface-1-0:mac-interface-pac(\"\r",
									"                    + \"mac-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac(\"\r",
									"                    + \"pure-ethernet-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac(\"\r",
									"                    + \"tdm-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"vlan-interface-1-0:vlan-interface-pac(\"\r",
									"                    + \"vlan-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"wire-interface-2-0:wire-interface-pac(\"\r",
									"                    + \"wire-interface-configuration\"\r",
									"                + \")\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"profile-collection;\"\r",
									"        + \"forwarding-domain\";\r",
									"\r",
									"    filters = \"?fields=\"\r",
									"        + \"equipment-augment-1-0:control-construct-pac;\"\r",
									"        + \"top-level-equipment;\"\r",
									"        + \"equipment(\"\r",
									"            + \"uuid;\"\r",
									"            + \"operational-state;\"\r",
									"            + \"connector(\"\r",
									"                + \"local-id;\"\r",
									"                + \"equipment-augment-1-0:connector-pac(\"\r",
									"                    + \"connector-kind;\"\r",
									"                    + \"outside-label;\"\r",
									"                    + \"sequence-id\"\r",
									"                + \")\"\r",
									"            + \");\"\r",
									"            + \"contained-holder(\"\r",
									"                + \"occupying-fru;\"\r",
									"                + \"local-id;\"\r",
									"                + \"equipment-augment-1-0:holder-pac(\"\r",
									"                    + \"vendor-label;\"\r",
									"                    + \"outside-label;\"\r",
									"                    + \"sequence-id\"\r",
									"                + \")\"\r",
									"            + \");\"\r",
									"            + \"expected-equipment(\"\r",
									"                + \"structure(\"\r",
									"                    + \"category\"\r",
									"                + \");\"\r",
									"                + \"manufactured-thing(\"\r",
									"                    + \"manufacturer-properties(\"\r",
									"                        +\"manufacturer-name\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-type(\"\r",
									"                        + \"part-type-identifier;\"\r",
									"                        + \"version\"\r",
									"                    + \")\"\r",
									"                + \");\"\r",
									"                + \"local-id;\"\r",
									"                + \"operational-state\"\r",
									"            + \");\"\r",
									"            + \"actual-equipment(\"\r",
									"                + \"structure(\"\r",
									"                    + \"category\"\r",
									"                + \");\"\r",
									"                + \"physical-properties(\"\r",
									"                    + \"temperature\"\r",
									"                + \");\"\r",
									"                + \"manufactured-thing(\"\r",
									"                    + \"manufacturer-properties(\"\r",
									"                        +\"manufacturer-name\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-type(\"\r",
									"                        + \"part-type-identifier;\"\r",
									"                        + \"version\"\r",
									"                    + \");\"\r",
									"                    + \"equipment-instance(\"\r",
									"                        + \"manufacture-date;\"\r",
									"                        + \"serial-number\"\r",
									"                    + \")\"\r",
									"                + \");\"\r",
									"                + \"operational-state\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"firmware-1-0:firmware-collection;\"\r",
									"        + \"logical-termination-point(\"\r",
									"            + \"uuid;\"\r",
									"            + \"layer-protocol(\"\r",
									"                + \"local-id;\"\r",
									"                + \"layer-protocol-name;\"\r",
									"                + \"air-interface-2-0:air-interface-pac(\"\r",
									"                    + \"air-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"ethernet-container-2-0:ethernet-container-pac(\"\r",
									"                    + \"ethernet-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac(\"\r",
									"                    + \"hybrid-mw-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"ip-interface-1-0:ip-interface-pac(\"\r",
									"                    + \"ip-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"mac-interface-1-0:mac-interface-pac(\"\r",
									"                    + \"mac-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac(\"\r",
									"                    + \"pure-ethernet-structure-configuration\"\r",
									"                + \");\"\r",
									"                + \"tdm-container-2-0:tdm-container-pac(\"\r",
									"                    + \"tdm-container-configuration\"\r",
									"                + \");\"\r",
									"                + \"vlan-interface-1-0:vlan-interface-pac(\"\r",
									"                    + \"vlan-interface-configuration\"\r",
									"                + \");\"\r",
									"                + \"wire-interface-2-0:wire-interface-pac(\"\r",
									"                    + \"wire-interface-configuration\"\r",
									"                + \")\"\r",
									"            + \")\"\r",
									"        + \");\"\r",
									"        + \"profile-collection;\"\r",
									"        + \"forwarding-domain\";\r",
									"\r",
									"*/\r",
									"\r",
									"    logger.log(\"filters as given as input : \" + filters);\r",
									"\r",
									"    filters = urlEncodeFieldsFilterString(filters);\r",
									"    logger.log(\"filters after URL encoding: \" + filters);\r",
									"\r",
									"    let resourcePath;\r",
									"    resourcePath = \"\";\r",
									"\r",
									"    let pathToControlConstruct;\r",
									"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
									"    let mountName;\r",
									"    mountName = collectionInfo.mountName;\r",
									"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
									"\r",
									"    let server;\r",
									"    server = serverInfo.server;\r",
									"\r",
									"    let uri;\r",
									"    if (mountName!=\"\") {\r",
									"        uri = server + pathToControlConstruct + resourcePath + filters\r",
									"    } else {\r",
									"        logger.warn(\"Input data incomplete.\");\r",
									"        uri = dummyServerInfo.dummyUri\r",
									"    }\r",
									"\r",
									"    let requestBody;\r",
									"    requestBody = '{}';\r",
									"\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"    pm.variables.set(\"requestBody\", requestBody);\r",
									"    \r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
									"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
									"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
									"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
									"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
									"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
									"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function replaceSubstringByNewstringInInputstring(Inputstring, Substring, Newstring) {\r",
									"    try {\r",
									"        let indexOfStartOfSubstring = Inputstring.lastIndexOf(Substring);\r",
									"        while ( indexOfStartOfSubstring != -1 ) {\r",
									"            let precedingSubString = Inputstring.slice(0, indexOfStartOfSubstring);\r",
									"            let indexOfEndOfSubstring = indexOfStartOfSubstring + Substring.length;\r",
									"            let subsequentSubString = Inputstring.slice(indexOfEndOfSubstring);\r",
									"            Inputstring = precedingSubString + Newstring + subsequentSubString;\r",
									"\r",
									"            indexOfStartOfSubstring = Inputstring.lastIndexOf(Substring)\r",
									"        }\r",
									"\r",
									"    } catch (error) {\r",
									"        Inputstring = \"-1\";\r",
									"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
									"    }\r",
									"\r",
									"    return Inputstring\r",
									"}\r",
									"\r",
									"function urlEncodeFieldsFilterString(filters) {\r",
									"    filters = replaceSubstringByNewstringInInputstring(filters, \"(\", \"%28\");\r",
									"    filters = replaceSubstringByNewstringInInputstring(filters, \")\", \"%29\");\r",
									"    filters = replaceSubstringByNewstringInInputstring(filters, \":\", \"%3A\");\r",
									"    filters = replaceSubstringByNewstringInInputstring(filters, \";\", \"%3B\");\r",
									"    return filters\r",
									"}\r",
									"\r",
									"function FillUuidIntoPath(path, uuid) {\r",
									"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
									"      let subStringToBeReplaced = \"{uuid}\";\r",
									"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
									"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
									"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
									"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
									"      path = precedingSubString + uuid + subsequentSubString;\r",
									"      return path\r",
									"    } else {\r",
									"      return path\r",
									"    }\r",
									"}\r",
									"\r",
									"function FillLocalIdIntoPath(path, localId) {\r",
									"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
									"      let subStringToBeReplaced = \"{localId}\";\r",
									"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
									"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
									"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
									"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
									"      path = precedingSubString + localId + subsequentSubString;\r",
									"      return path\r",
									"    } else {\r",
									"      return path\r",
									"    }\r",
									"}\r",
									"\r",
									"function FillMountNameIntoPath(path, mountName) {\r",
									"  let subStringToBeReplaced = \"{mountName}\";\r",
									"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
									"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
									"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
									"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
									"  path = precedingSubString + mountName + subsequentSubString;\r",
									"  return path\r",
									"}\r",
									"\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
									"    try {\r",
									"        for(let i=0; i<collectionInputList.length; i++) {\r",
									"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
									"                return collectionInputList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! collectionInputList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var uri;\r",
									"var dummyUri;\r",
									"var serverToBeApplied;\r",
									"try {\r",
									"    uri = pm.variables.get(\"uri\");\r",
									"\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
									"    dummyUri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    let collectionInputList;\r",
									"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
									"    let collectionInfo;\r",
									"    collectionInfo = ExtractCollectionInput(collectionInputList, \"WredProfile\");\r",
									"    serverToBeApplied = collectionInfo.serverToBeApplied\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"var responseCode;\r",
									"var responseObject = {};\r",
									"try {\r",
									"    if ( uri != dummyUri ) {\r",
									"        let response;\r",
									"        response = pm.response;\r",
									"\r",
									"        responseCode = parseInt(response.code);\r",
									"\r",
									"        if ( Math.floor(responseCode/100) === 2 ) {\r",
									"            responseObject = JSON.parse(response.stream);\r",
									"\r",
									"        } else {\r",
									"            logger.warn(\"Response code different from 200.\")\r",
									"        }\r",
									"\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! result could not be extracted.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    if ( uri != dummyUri ) {\r",
									"        logger.log(\"Analysis:\");\r",
									"\r",
									"        if ( Object.keys(responseObject).length != 0 ) {\r",
									"            logger.log(\"Interface Response:\");\r",
									"            logger.log(responseObject);\r",
									"\r",
									"        } else {\r",
									"            logger.log(\"  - FAIL: No response body found\")\r",
									"        }\r",
									"\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! validation could not be completely executed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
									"    try {\r",
									"        for(let i=0; i<collectionInputList.length; i++) {\r",
									"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
									"                return collectionInputList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! collectionInputList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    // no processing required\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be processed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}